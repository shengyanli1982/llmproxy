# LLMProxy 配置模板
# 请根据您的实际需求修改此文件。
# 更多信息和高级配置，请参阅官方文档。

#-------------------------------------------------------------------------------
# 请确保在修改后保存文件。
# 对于生产环境，强烈建议将包含敏感信息 (如 API 密钥) 的配置文件妥善保管，
# 并考虑使用环境变量或密钥管理服务来处理这些敏感值。
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# HTTP 服务器配置 (http_server)
#-------------------------------------------------------------------------------
# 定义 LLMProxy 如何监听和处理传入的 HTTP 请求。
http_server:
  #-----------------------------------------------------------------------------
  # 转发服务 (forwards)
  #-----------------------------------------------------------------------------
  # 定义一组或多组转发规则，每个规则监听特定端口并将请求路由到指定的上游组。
  forwards:
    # 示例 1: 转发到混合上游组 (mixgroup)
    - name: to_mixgroup # [必填] 转发服务名称。必须在配置文件中唯一，用于日志和管理识别。
      port: 3000 # [必填] 此转发服务监听的端口号。默认值: 3000
      address:
        "0.0.0.0" # [可选] 服务监听的网络地址。默认值: "0.0.0.0" (监听所有网络接口)。
        # 考虑安全性，可设置为 "127.0.0.1" (仅本地访问)。
      default_group: "mixgroup" # [必填] 此转发服务关联的上游组名称。该名称必须在 `upstream_groups` 部分定义。
      # [可选] IP 速率限制配置。如果省略，则不启用此转发的速率限制。
      ratelimit:
        per_second: 100 # [可选] 每秒允许来自单个 IP 的最大请求数。默认值: 100
        burst: 200 # [可选] 允许来自单个 IP 的突发请求数。默认值: 200。
      # [可选] 连接超时配置。如果省略，将使用默认值。
      timeout:
        connect: 10 # [可选] 客户端连接到 LLMProxy 的超时时间 (秒)。默认值: 10
      # [可选] 路由规则配置。如果省略，则不启用路由规则。
      routing:
        - path: "/api/v1/chat/completions" # [必填] 路由规则路径。
          target_group: "openai" # [必填] 路由规则目标组名称。该名称必须在 `upstream_groups` 部分定义。

    # 示例 2: 转发到 OpenAI 上游组 (openai_group)
    - name: openai_group # [必填] 转发服务名称。
      port: 3001 # [必填] 监听端口。
      address: "0.0.0.0" # [可选] 监听地址。默认值: "0.0.0.0"
      default_group: "openai" # [必填] 关联的上游组名称。该名称必须在 `upstream_groups` 部分定义。
      # [可选] 速率限制配置。如果省略，则不启用速率限制。
      ratelimit:
        per_second: 100 # [可选] 每秒允许的最大请求数。默认值: 100
        burst: 200 # [可选] 允许的突发请求数。默认值: 200
      # [可选] 连接超时配置。如果省略，将使用默认值。
      timeout:
        connect: 10 # [可选] 连接超时时间 (秒)。默认值: 10

    # 示例 3: 转发到故障转移上游组 (failover_group)
    - name: to_failover # [必填] 转发服务名称。
      port: 3002 # [必填] 监听端口。
      address: "0.0.0.0" # [可选] 监听地址。默认值: "0.0.0.0"
      default_group: "failover_group" # [必填] 关联的上游组名称。
      # [可选] 速率限制配置。如果省略，则不启用速率限制。
      ratelimit:
        per_second: 100 # [可选] 每秒允许的最大请求数。默认值: 100
        burst: 200 # [可选] 允许的突发请求数。默认值: 200
      # [可选] 连接超时配置。如果省略，将使用默认值。
      timeout:
        connect: 10 # [可选] 连接超时时间 (秒)。默认值: 10

    # 示例 4: 展示高级路由规则 (to_routing_examples)
    # 此示例专门用于演示 `routing` 功能的各种高级用法，
    # 包括命名参数、正则表达式、通配符以及路由优先级。
    # 它监听 3003 端口。
    - name: to_routing_examples # [必填] 转发服务名称。
      port: 3003 # [必填] 监听端口。
      address: "0.0.0.0" # [可选] 监听地址。默认值: "0.0.0.0"
      default_group: "default_routing_target" # [必填] 未匹配任何路由规则时的默认目标组。
      # [可选] 高级路由规则配置。
      # 路由匹配遵循最长、最精确匹配原则。静态路径的优先级高于参数化路径和通配符路径。
      routing:
        # 规则 1: 静态路径（最高优先级）
        # 完全匹配 "/api/users/admin" 的请求将被路由到 "static_path_group"。
        # 它的优先级高于下面的 "/api/users/:id"。
        - path: "/api/users/admin"
          target_group: "static_path_group"

        # 规则 2: 命名参数
        # 匹配如 "/api/users/123" 或 "/api/users/abc" 的路径。
        # `:id` 是一个参数，可以匹配任何单个路径段。
        - path: "/api/users/:id"
          target_group: "user_api_group"

        # 规则 3: 带正则表达式的命名参数
        # 匹配如 "/api/items/42" 的路径，但 `id` 必须是数字。
        # 不会匹配 "/api/items/abc"。
        - path: "/api/items/{id:[0-9]+}"
          target_group: "item_api_group"

        # 规则 4: 更复杂的正则表达式参数
        # [注意] 正则表达式语法受底层库限制，不支持 `{m,n}` 简写形式，请使用完整模式。
        # 匹配如 "/api/products/SKU123" 的路径。
        # `code` 必须由三个大写字母和三个数字组成。
        - path: "/api/products/{code:[A-Z][A-Z][A-Z][0-9][0-9][0-9]}"
          target_group: "product_api_group"

        # 规则 5: 中间通配符
        # `*` 匹配单个路径段。例如，匹配 "/api/v1/docs" 或 "/api/v2/docs"，
        # 但不匹配 "/api/v1/v2/docs"。
        - path: "/api/*/docs"
          target_group: "api_docs_group"

        # 规则 6: 混合模式（参数化 + 正则）
        # 结合命名参数和正则表达式，匹配如 "/api/v2/users/99/profile" 的复杂路径。
        - path: "/api/:version/users/{id:[0-9]+}/profile"
          target_group: "user_profile_group"

        # 规则 7: 尾部通配符
        # `*` 匹配路径末尾的任何内容，包括多个段。
        # 例如，匹配 "/files/a/b/c.txt"。
        - path: "/files/*"
          target_group: "file_server_group"

  #-----------------------------------------------------------------------------
  # 管理服务 (admin)
  #-----------------------------------------------------------------------------
  # [可选] 配置管理接口，用于提供监控指标 (如 /metrics) 和健康检查 (如 /health)。
  # 注意: 管理接口通常不设置速率限制。
  admin:
    port: 9000 # [可选] 管理服务监听的端口号。默认值: 9000
    address:
      "0.0.0.0" # [可选] 管理服务监听的网络地址。默认值: "0.0.0.0"
      # 出于安全考虑，建议在生产环境中设置为 "127.0.0.1"，仅允许本地访问。
    # [可选] 管理接口连接超时配置。如果省略，将使用默认值。
    timeout:
      connect: 10 # [可选] 连接到管理接口的超时时间 (秒)。默认值: 10

#-------------------------------------------------------------------------------
# 上游服务定义 (upstreams)
#-------------------------------------------------------------------------------
# 定义后端 LLM API 服务。每个上游代表一个实际的 API 端点。
upstreams:
  # 示例 1: OpenAI API
  - name: openai_primary # [必填] 上游服务名称。必须在配置文件中唯一。
    url:
      "https://api.openai.com/v1/chat/completions" # [必填] 上游服务的完整基础 URL。
      # 注意: 应配置为基础URL，完整端点 "https://api.openai.com/v1/chat/completions"。
    # [可选] 认证配置。如果省略，默认不使用认证 (auth.type="none")。
    auth:
      type:
        "bearer" # [可选] 认证类型。可选值:
        #   "bearer": 使用 Bearer Token 认证 (例如 OpenAI, Anthropic)。
        #   "basic": 使用 Basic Auth (用户名/密码)。
        #   "none": 无认证。默认值: "none"
      token:
        "YOUR_OPENAI_API_KEY_HERE" # [条件必填] 当 type 为 "bearer" 时，必须提供 API Key。
        # 请替换为您的真实 OpenAI API 密钥。
      # username: "YOUR_USERNAME" # [条件必填] 当 type 为 "basic" 时，必须提供用户名。
      # password: "YOUR_PASSWORD" # [条件必填] 当 type 为 "basic" 时，必须提供密码。
    # [可选] HTTP 头部操作。用于在请求转发到此上游前修改请求头。如果省略，不进行任何头部修改。
    headers:
      - op:
          "insert" # [必填] 操作类型:
          #   "insert": 如果头部不存在则插入；若存在则不执行任何操作。
          #   "replace": 如果头部存在则替换其值；若不存在则插入。
          #   "remove": 如果头部存在则删除。
        key: X-Custom-Header-For-OpenAI # [必填] 要操作的 HTTP 头部名称。
        value:
          "MyProxyValue" # [条件必填] 对于 "insert" 或 "replace" 操作，必须提供头部的值。
          # 对于 "remove" 操作，此字段可省略。
    # [可选] 熔断器配置。如果省略，则不启用熔断器功能。
    breaker:
      threshold:
        0.5 # [可选] 熔断器触发所需的失败率。默认值: 0.5。取值范围: 0.01-1.0
        # 例如，0.5 表示 50% 的请求失败时触发熔断。
      cooldown:
        30 # [可选] 熔断器冷却时间 (秒)，即熔断后多久尝试进入半开状态。
        # 默认值: 30。取值范围: 1-3600
    # [可选] 限速器配置。如果省略，则不启用限速器功能。
    ratelimit:
      per_second: 100 # [可选] 每秒允许的最大请求数。默认值: 100

  # 示例 2: Anthropic API
  - name: anthropic_primary # [必填] 上游服务名称。
    url: "https://api.anthropic.com/v1/chat/completions" # [必填] 上游服务 URL。
    # [可选] 认证配置。
    auth:
      type: "bearer" # [可选] 认证类型。默认值: "none"
      token:
        "YOUR_ANTHROPIC_API_KEY_HERE" # [条件必填] 当 type 为 "bearer" 时必填。
        # 请替换为您的真实 Anthropic API 密钥。
    # [可选] HTTP 头部操作。用于在请求转发到此上游前修改请求头。
    headers:
      - op: "insert" # [必填] 操作类型。
        key:
          "x-api-key" # [必填] 要操作的 HTTP 头部名称。
          # 注意：某些 API (如 Anthropic Claude) 可能要求通过头部传递 API Key 而不是 Bearer Token。
          # 请参考具体 API 文档。此处的 'token' 字段仍可用于 'Bearer' 认证类型，
          # 而头部操作可以用于其他形式的基于头部的密钥传递。
        value:
          "YOUR_ANTHROPIC_API_KEY_IN_HEADER_IF_NEEDED" # [条件必填] 当 op 为 "insert" 或 "replace" 时必填。
          # 如果 API Key 通过头部传递，请在此处配置。
    # [可选] 限速器配置。如果省略，则不启用限速器功能。
    ratelimit:
      per_second: 100 # [可选] 每秒允许的最大请求数。默认值: 100

  # 示例 3: 使用 Basic 认证的自定义上游
  - name: custom_service_basic_auth # [必填] 上游服务名称。
    url: "https://api.example.com/v1/chat/completions" # [必填] 上游服务 URL。
    # [可选] 认证配置。
    auth:
      type: "basic" # [可选] 认证类型。默认值: "none"
      username: "service_user" # [条件必填] 当 type 为 "basic" 时必填。
      password:
        "service_password_placeholder" # [条件必填] 当 type 为 "basic" 时必填。
        # 请替换为实际密码。
    # [可选] 熔断器配置
    breaker:
      threshold: 0.5 # [可选] 熔断器触发所需的失败率。默认值: 0.5。取值范围: 0.01-1.0
      cooldown: 30 # [可选] 熔断器冷却时间 (秒)。默认值: 30。取值范围: 1-3600
  # 注意:
  # - 如果省略 `auth` 字段，则默认不对此上游使用任何认证 (等同于 auth.type="none")。
  # - 如果省略 `headers` 字段，则默认不对发送到此上游的请求头进行任何修改。
  # - 如果省略 `breaker` 字段，则默认不对此上游启用熔断器。
  # - 如果省略 `ratelimit` 字段，则默认不对此上游启用限速器。

#-------------------------------------------------------------------------------
# 上游组定义 (upstream_groups)
#-------------------------------------------------------------------------------
# 将多个上游服务组合在一起，并定义负载均衡、HTTP 客户端行为等。
upstream_groups:
  # 示例 1: 混合上游组 (用于演示多种特性)
  - name: mixgroup # [必填] 上游组名称。必须在配置文件中唯一。
    # [必填] 此组包含的上游服务列表 (至少需要一个)。
    # 每个条目引用在 `upstreams` 部分定义的上游服务的 `name`。
    upstreams:
      - name: openai_primary # [必填] 引用在 upstreams 部分定义的上游服务名称。
      # - name: anthropic_primary # 可以添加多个上游到同一组
    # [可选] 负载均衡策略。
    balance:
      strategy:
        "roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"。可选值:
        #   "roundrobin": 轮询。按顺序将请求分发给每个上游。
        #   "weighted_roundrobin": 加权轮询。根据为每个上游定义的权重分配请求。
        #   "random": 随机。随机选择一个上游。
        #   "response_aware": 响应时间感知。选择平均响应时间最短的上游。
        #   "failover": 故障转移。按照上游列表的顺序尝试，如果当前的上游不可用，则使用后面的上游。
    # [可选] HTTP 客户端配置。定义 LLMProxy 如何与此组中的上游服务通信。
    # 如果省略，将使用全局默认的 HTTP 客户端配置。
    http_client:
      agent:
        "LLMProxy/1.0 (YourIdentifier)" # [可选] 发送到上游的 User-Agent 头部值。默认值: "LLMProxy/1.0"
        # 建议添加标识符以便于追踪。
      keepalive:
        60 # [可选] TCP Keepalive 时间 (秒)。默认值: 60。取值范围: 0-600。0 表示禁用。
        # 有助于保持与上游的连接活跃，减少延迟。
      stream:
        true # [可选] 是否启用流式传输模式。默认值: true
        # 对于 LLM API 的流式响应 (server-sent events) 非常重要。
        # 当为 `true` 时，`timeout.request` 配置被禁用，
        # 这对长时间运行的流式连接至关重要，防止过早终止连接。
        # 当为 `false` 时，会应用固定的请求超时，适用于非流式API调用。
      # [可选] 连接和请求超时配置。如果省略，将使用默认值。
      timeout:
        connect: 10 # [可选] 连接到上游服务的超时时间 (秒)。默认值: 10
        request:
          300 # [可选] 从发送请求到接收到上游完整响应 (非流式) 的超时时间 (秒)。默认值: 300
          # 注意: 在 `stream: true` 时，此超时被禁用，这对于流式LLM请求必要。
          # 对于大多数LLM API调用，推荐300秒或更高。
        idle: 60 # [可选] 与上游服务的连接在无活动后被视为空闲并关闭的超时时间 (秒)。默认值: 60
      # [可选] 请求重试配置。如果省略，则不启用重试功能。
      retry:
        attempts: 3 # [可选] 最大重试次数 (不包括首次尝试)。默认值: 3
        initial:
          500 # [可选] 首次重试前的初始等待间隔 (毫秒)。默认值: 500
          # 后续重试间隔可能会增加 (例如指数退避)。
      # [可选] HTTP/HTTPS 代理配置。如果省略，则不使用代理。
      proxy:
        url:
          "http://user:pass@your-proxy-server.com:8080" # [必填] 代理服务器 URL。
          # 示例: "http://proxy.example.com:8080"
          #       "socks5://user:password@host:port" (如果支持 SOCKS5)

  # 示例 2: OpenAI 专用上游组 (使用加权轮询)
  - name: openai # [必填] 上游组名称。
    upstreams:
      - name: openai_primary # [必填] 引用上游服务名称。
        weight:
          8 # [条件可选] 权重。仅在 `balance.strategy` 为 "weighted_roundrobin" 时有效。默认值: 1
          # 权重越高的上游将接收到更多请求。
      - name: custom_service_basic_auth # 可以将不同类型的上游放入一个组
        weight: 2 # [条件可选] 权重。
    balance:
      strategy: "weighted_roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"
    http_client: # [可选] 可以为每个组定制 HTTP 客户端行为
      agent: "LLMProxy/1.0 (OpenAIClient)" # [可选] User-Agent。默认值: "LLMProxy/1.0"
      keepalive: 90 # [可选] 例如，为 OpenAI 连接设置更长的 keepalive。默认值: 60。取值范围: 0-600
      stream: true # [可选] 启用流式传输模式。默认值: true
      # [可选] 连接和请求超时配置。如果省略，将使用默认值。
      timeout:
        connect: 10 # [可选] 连接超时。默认值: 10
        request: 300 # [可选] 请求超时。默认值: 300。对于 OpenAI 请求，通常响应时间较长。
        idle: 90 # [可选] 空闲连接超时。默认值: 60
      retry:
        attempts: 2 # [可选] 最大重试次数。默认值: 3
        initial: 1000 # [可选] 初始等待间隔 (毫秒)。默认值: 500
      # [可选] HTTP/HTTPS 代理配置。如果省略，则不使用代理。
      proxy:
        url: "http://proxy.example.com:8080" # [必填] 代理服务器 URL。

  # 示例 3: Anthropic 专用上游组 (使用随机负载均衡)
  - name: anthropic # [必填] 上游组名称。
    upstreams:
      - name: anthropic_primary # [必填] 引用上游服务名称。
      # 可以添加更多 Anthropic 上游实例，例如不同区域的端点
    balance:
      strategy:
        "random" # [可选] 负载均衡策略。默认值: "roundrobin"
        # 对于期望更均匀随机分布的场景，可选择 "random"。
    http_client:
      agent: "LLMProxy/1.0 (AnthropicClient)" # [可选] User-Agent。默认值: "LLMProxy/1.0"
      keepalive: 60 # [可选] TCP Keepalive 时间。默认值: 60。取值范围: 0-600
      stream: true # [可选] 确保使用 stream。默认值: true。对于流式响应必要。
      # [可选] 连接和请求超时配置。如果省略，将使用默认值。
      timeout:
        connect: 15 # [可选] Anthropic 连接可能需要稍长超时。默认值: 10
        request: 300 # [可选] 请求超时。默认值: 300。Anthropic Claude 的响应也可能较长。
        idle: 60 # [可选] 空闲连接超时。默认值: 60
      retry:
        attempts: 2 # [可选] 最大重试次数。默认值: 3
        initial: 1000 # [可选] 初始等待间隔 (毫秒)。默认值: 500
      # [可选] HTTP/HTTPS 代理配置。如果省略，则不使用代理。
      proxy:
        url: "http://proxy.example.com:8080" # [必填] 代理服务器 URL。

  # 示例 4: 故障转移上游组 (使用故障转移负载均衡)
  - name: failover_group # [必填] 上游组名称。
    upstreams:
      - name: openai_primary # [必填] 主要上游，优先使用
      - name: custom_service_basic_auth # [必填] 备用上游，当主要上游不可用时使用
      # 可以添加更多备用上游，按照优先级顺序排列
    balance:
      strategy:
        "failover" # [可选] 负载均衡策略。默认值: "roundrobin"
        # "failover": 故障转移策略，按照上游列表的顺序尝试
    http_client:
      agent: "LLMProxy/1.0 (FailoverClient)" # [可选] User-Agent。默认值: "LLMProxy/1.0"
      keepalive: 60 # [可选] TCP Keepalive 时间。默认值: 60。取值范围: 0-600
      stream: true # [可选] 启用流式传输模式。默认值: true。对于流式响应必要。
      # [可选] 连接和请求超时配置。如果省略，将使用默认值。
      timeout:
        connect: 10 # [可选] 连接超时。默认值: 10
        request: 300 # [可选] 请求超时。默认值: 300
        idle: 60 # [可选] 空闲连接超时。默认值: 60
      retry:
        attempts: 2 # [可选] 最大重试次数。默认值: 3
        initial: 1000 # [可选] 初始等待间隔 (毫秒)。默认值: 500
      # [可选] HTTP/HTTPS 代理配置。如果省略，则不使用代理。
      proxy:
        url: "http://proxy.example.com:8080" # [必填] 代理服务器 URL。

  # --- 为高级路由示例定义的上游组 ---
  # 以下是为 'to_routing_examples' 转发服务中的高级路由规则定义的专用上游组。
  # 每个组都配置了简单的轮询负载均衡，并将请求路由到相应的后端服务。

  # 示例: 默认目标组
  # 当 'to_routing_examples' 中的请求未匹配任何特定路由规则时，将使用此默认组。
  - name: default_routing_target # [必填] 上游组名称。必须在配置文件中唯一。
    # [必填] 此组包含的上游服务列表。
    upstreams:
      - name: custom_service_basic_auth # [必填] 引用在 'upstreams' 部分定义的上游服务名称。
    # [可选] 负载均衡策略。
    balance:
      strategy: "roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"。

  # 示例: 静态路径目标组
  # 用于处理到 "/api/users/admin" 的请求，演示静态路径的最高优先级匹配。
  - name: static_path_group # [必填] 上游组名称。必须在配置文件中唯一。
    # [必填] 此组包含的上游服务列表。
    upstreams:
      - name: openai_primary # [必填] 引用在 'upstreams' 部分定义的上游服务名称。
    # [可选] 负载均衡策略。
    balance:
      strategy: "roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"。

  # 示例: 用户 API 目标组 (命名参数)
  # 用于处理到 "/api/users/:id" 的请求，演示了使用命名参数进行路由。
  - name: user_api_group # [必填] 上游组名称。必须在配置文件中唯一。
    # [必填] 此组包含的上游服务列表。
    upstreams:
      - name: custom_service_basic_auth # [必填] 引用在 'upstreams' 部分定义的上游服务名称。
    # [可选] 负载均衡策略。
    balance:
      strategy: "roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"。

  # 示例: 物品 API 目标组 (带正则的命名参数)
  # 用于处理到 "/api/items/{id:[0-9]+}" 的请求，演示了参数的正则约束。
  - name: item_api_group # [必填] 上游组名称。必须在配置文件中唯一。
    # [必填] 此组包含的上游服务列表。
    upstreams:
      - name: custom_service_basic_auth # [必填] 引用在 'upstreams' 部分定义的上游服务名称。
    # [可选] 负载均衡策略。
    balance:
      strategy: "roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"。

  # 示例: 产品 API 目标组 (复杂正则)
  # 用于处理到 "/api/products/{code:[A-Z][A-Z][A-Z][0-9][0-9][0-9]}" 的请求。
  - name: product_api_group # [必填] 上游组名称。必须在配置文件中唯一。
    # [必填] 此组包含的上游服务列表。
    upstreams:
      - name: custom_service_basic_auth # [必填] 引用在 'upstreams' 部分定义的上游服务名称。
    # [可选] 负载均衡策略。
    balance:
      strategy: "roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"。

  # 示例: API 文档目标组 (中间通配符)
  # 用于处理到 "/api/*/docs" 的请求，演示了使用中间通配符 `*`。
  - name: api_docs_group # [必填] 上游组名称。必须在配置文件中唯一。
    # [必填] 此组包含的上游服务列表。
    upstreams:
      - name: custom_service_basic_auth # [必填] 引用在 'upstreams' 部分定义的上游服务名称。
    # [可选] 负载均衡策略。
    balance:
      strategy: "roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"。

  # 示例: 用户资料目标组 (混合模式)
  # 用于处理到 "/api/:version/users/{id:[0-9]+}/profile" 的请求，演示混合路由模式。
  - name: user_profile_group # [必填] 上游组名称。必须在配置文件中唯一。
    # [必填] 此组包含的上游服务列表。
    upstreams:
      - name: custom_service_basic_auth # [必填] 引用在 'upstreams' 部分定义的上游服务名称。
    # [可选] 负载均衡策略。
    balance:
      strategy: "roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"。

  # 示例: 文件服务器目标组 (尾部通配符)
  # 用于处理到 "/files/*" 的请求，演示尾部通配符 `*` 匹配剩余所有路径段。
  - name: file_server_group # [必填] 上游组名称。必须在配置文件中唯一。
    # [必填] 此组包含的上游服务列表。
    upstreams:
      - name: custom_service_basic_auth # [必填] 引用在 'upstreams' 部分定义的上游服务名称。
    # [可选] 负载均衡策略。
    balance:
      strategy: "roundrobin" # [可选] 负载均衡策略。默认值: "roundrobin"。
